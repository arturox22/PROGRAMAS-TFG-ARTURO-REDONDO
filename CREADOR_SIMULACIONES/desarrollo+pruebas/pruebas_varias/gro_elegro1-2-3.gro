//////////////////////////////////////////////////////////////////////////////////////
//
// gro is protected by the UW OPEN SOURCE LICENSE, which is summaraize here.
// Please see the file LICENSE.txt for the complete license.
//
// THE SOFTWARE (AS DEFINED BELOW) AND HARDWARE DESIGNS (AS DEFINED BELOW) IS PROVIDED
// UNDER THE TERMS OF THIS OPEN SOURCE LICENSE (“LICENSE”).  THE SOFTWARE IS PROTECTED
// BY COPYRIGHT AND/OR OTHER APPLICABLE LAW.  ANY USE OF THIS SOFTWARE OTHER THAN AS
// AUTHORIZED UNDER THIS LICENSE OR COPYRIGHT LAW IS PROHIBITED.
//
// BY EXERCISING ANY RIGHTS TO THE SOFTWARE AND/OR HARDWARE PROVIDED HERE, YOU ACCEPT AND
// AGREE TO BE BOUND BY THE TERMS OF THIS LICENSE.  TO THE EXTENT THIS LICENSE MAY BE
// CONSIDERED A CONTRACT, THE UNIVERSITY OF WASHINGTON (“UW”) GRANTS YOU THE RIGHTS
// CONTAINED HERE IN CONSIDERATION OF YOUR ACCEPTANCE OF SUCH TERMS AND CONDITIONS.
//
// TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
//
//

include standard_elegro1-1

// Cell types
internal unit ecolis ( [ ... ], 'a ) "ecolis";



// World control
internal unit message ( int, string ) "message";
internal unit clear_messages ( int ) "clear_messages";
internal unit reset () "reset";
internal unit stop () "stop";
internal unit start () "start";
internal real stats ( string ) "stats";
internal unit snapshot ( string ) "snapshot";
internal unit dump ( int ) "dump";
internal unit dump_single ( int ) "dump_single";
internal unit dump_multiple ( ... ) "dump_multiple";
internal unit dump_multiple_plasmids ( ... ) "dump_multiple_plasmids";
internal real time() "time";

//---M genetics parser
//math
	internal unit math_function ([...]) "math_function";
	internal unit gate ([...]) "gate"; //v1-1-5-0b
	internal unit qgate ([...]) "qgate"; //v1-2-1-0g
//expression
	internal unit dna_element ([...]) "dna_element";
	internal unit molecule ([...]) "molecule";
	internal unit regulation ([...]) "regulation";
	internal unit operon ([...]) "operon";
	internal unit plasmid ([...]) "plasmid";
//activities
	internal unit strain ([...]) "strain"; //v1-1-5-0g
	internal unit metabolism ([...]) "metabolism";
	internal unit conjugation ([...]) "conjugation";
//plasmid reactions
	internal unit memory_conversion ([...]) "memory_conversion";
	internal unit memoryless_conversion ([...]) "memoryless_conversion";
	
	internal unit load_gen ([...]) "load_gen";
	
//---action alternatives
	internal unit color ([...]) "color"; //v1-1-5-0h
	internal unit replating ([...]) "replating"; //v1-2-2-0b
	internal unit output ([...]) "output"; //v1-2-1-0a
	internal unit output_snapshot ([...]) "output_snapshot"; //v1-2-2-0a


//Cellsignals
internal unit grid ( int, int, int ) "grid";
internal int signal ( [...] ) "signal";
//internal unit s_add_reaction ( int list, int list, real) "s_add_reaction";

internal unit s_set_signal ( int, real, real, real ) "s_set_signal";
internal unit s_set_signal_rect ( int, real, real, real, real, real ) "s_set_signal_rect";
internal real s_get_signal ( int ) "s_get_signal";
internal real s_get_signal_area ( int ) "s_get_signal_area";
internal unit s_emit_signal ( int, real, string ) "s_emit_signal";
internal unit s_emit_signal_point (int, real, real, real) "s_emit_signal_point";
internal unit s_emit_signal_area ( int, real ) "s_emit_signal_area";
internal unit s_absorb_signal ( int, real, string ) "s_absorb_signal";
internal unit s_absorb_signal_area ( int, real ) "s_absorb_signal_area";


// Themes
dark_theme := 
[
  background := "#000000",
  ecoli_edge := "#444444",
  ecoli_selected := "#880000",
  message := "#ffffff",
  mouse := "#ffffff",
  
  cellcolor_saturation_max := { 200.0, 200.0, 200.0, 200.0 }, //v1-2-1-0k
  cellcolor_saturation_min := { 0.0, 0.0, 0.0, 0.0 }, //v1-2-1-0k
  
  signals_saturation_max := 5.0,
  signals_saturation_min := 0.0,
  signals_renderthreshold := 0.01,
  signals_rendermode := "logarithmic", //v1-2-1-0i

  signals := {
    { 1, 0, 1 },
    { 0, 1, 1 },
    { 1, 1, 0 },
    { 1, 0, 0 },
    { 0, 1, 0 },
    { 0, 0, 1 }
  }
];

bright_theme := 
[
  background := "#ffffff",
  ecoli_edge := "#777777",
  ecoli_selected := "#ff0000",
  message := "#999999",
  mouse := "#000000",
  
  cellcolor_saturation_max := { 200.0, 200.0, 200.0, 200.0 }, //v1-2-1-0k
  cellcolor_saturation_min := { 0.0, 0.0, 0.0, 0.0 }, //v1-2-1-0k
  
  signals_saturation_max := 5.0,
  signals_saturation_min := -1.0,
  signals_renderthreshold := 0.01,
  signals_rendermode := "logarithmic", //v1-2-1-0i

  signals := {
    { 1, 0, 1 },
    { 0, 1, 1 },
    { 1, 1, 0 },
    { 1, 0, 0 },
    { 0, 1, 0 },
    { 0, 0, 1 }
  }
];

internal unit set_theme ( [ ... ] ) "set_theme";
set_theme ( bright_theme );
internal unit zoom ( real ) "zoom";



// Cell specific
internal unit die() "die";
internal unit divide() "divide";

internal [ ... ] geometry() "geometry";

// Parameter Values
internal unit set ( string, real ) "set";

// default global parameters
set ( "dt", 0.02 );
set ( "gfp_saturation_min", 0.0 );
set ( "gfp_saturation_max", 50.0 );
set ( "rfp_saturation_min", 0.0 );
set ( "rfp_saturation_max", 50.0 );
set ( "yfp_saturation_min", 0.0 );
set ( "yfp_saturation_max", 50.0 );
set ( "cfp_saturation_min", 0.0 );
set ( "cfp_saturation_max", 50.0 );


set ( "throttle", 0.0 );
set ( "population_max", 1000 );


// default paramters for E. coli
set ( "ecoli_growth_rate", 0.0346574 );   // reactions/min
set ( "ecoli_init_length", 2.0 );           //um
set ( "ecoli_division_length_mean", 3.75 ); // um
set ( "ecoli_division_size_variance", 0.15 ); // um
set ( "ecoli_diameter", 1.0 );            // um
set ( "ecoli_scale", 10.0 );              // pixels/um



//default parameters for signals (Sandra)
set ("signals", 0.0); //0.0: off, 1.0: on



// Random generator parameter
set ( "seed", 0.0 );
